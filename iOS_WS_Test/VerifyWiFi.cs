///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace iOS_WS_Test
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The VerifyWiFi recording.
    /// </summary>
    [TestModule("a590ec22-56d3-4b31-8dc1-23f02738ca51", ModuleType.Recording, 1)]
    public partial class VerifyWiFi : ITestModule
    {
        /// <summary>
        /// Holds an instance of the iOS_WS_TestRepository repository.
        /// </summary>
        public static iOS_WS_TestRepository repo = iOS_WS_TestRepository.Instance;

        static VerifyWiFi instance = new VerifyWiFi();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public VerifyWiFi()
        {
            Wifi_Name = "Amogha";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static VerifyWiFi Instance
        {
            get { return instance; }
        }

#region Variables

        string _Wifi_Name;

        /// <summary>
        /// Gets or sets the value of variable Wifi_Name.
        /// </summary>
        [TestVariable("89efec8d-abdb-42ac-806f-0f4f1cab03f0")]
        public string Wifi_Name
        {
            get { return _Wifi_Name; }
            set { _Wifi_Name = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(0));
            Delay.Duration(3000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.WiFi_link' at Center", repo.ComPentairPentairhome.WiFi_linkInfo, new RecordItemIndex(1));
            repo.ComPentairPentairhome.WiFi_link.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(2));
            Delay.Duration(5000, false);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s to exist. Associated repository item: 'ComPentairPentairhome.WiFi_Header'", repo.ComPentairPentairhome.WiFi_HeaderInfo, new ActionTimeout(5000), new RecordItemIndex(3));
            repo.ComPentairPentairhome.WiFi_HeaderInfo.WaitForExists(5000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (AccessibilityLabel>'Network') on item 'ComPentairPentairhome.NetworkName'.", repo.ComPentairPentairhome.NetworkNameInfo, new RecordItemIndex(4));
            Validate.AttributeContains(repo.ComPentairPentairhome.NetworkNameInfo, "AccessibilityLabel", "Network");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (AccessibilityLabel>$Wifi_Name) on item 'ComPentairPentairhome.NetworkName'.", repo.ComPentairPentairhome.NetworkNameInfo, new RecordItemIndex(5));
            Validate.AttributeContains(repo.ComPentairPentairhome.NetworkNameInfo, "AccessibilityLabel", Wifi_Name);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (AccessibilityLabel>'Signal Strength') on item 'ComPentairPentairhome.SignalStrength'.", repo.ComPentairPentairhome.SignalStrengthInfo, new RecordItemIndex(6));
            Validate.AttributeContains(repo.ComPentairPentairhome.SignalStrengthInfo, "AccessibilityLabel", "Signal Strength");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (AccessibilityLabel>'Change WiFi Network') on item 'ComPentairPentairhome.ChangeWiFiNetwork'.", repo.ComPentairPentairhome.ChangeWiFiNetworkInfo, new RecordItemIndex(7));
            Validate.AttributeContains(repo.ComPentairPentairhome.ChangeWiFiNetworkInfo, "AccessibilityLabel", "Change WiFi Network");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Enabled='True') on item 'ComPentairPentairhome.ChangeWiFiNetwork'.", repo.ComPentairPentairhome.ChangeWiFiNetworkInfo, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.ComPentairPentairhome.ChangeWiFiNetworkInfo, "Enabled", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.ChangeWiFiNetwork' at Center", repo.ComPentairPentairhome.ChangeWiFiNetworkInfo, new RecordItemIndex(9));
            repo.ComPentairPentairhome.ChangeWiFiNetwork.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s to not exist. Associated repository item: 'ComPentairPentairhome.BluetoothPairingScreen'", repo.ComPentairPentairhome.BluetoothPairingScreenInfo, new ActionTimeout(5000), new RecordItemIndex(10));
            repo.ComPentairPentairhome.BluetoothPairingScreenInfo.WaitForNotExists(5000);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (AccessibilityLabel>'Bluetooth Pairing') on item 'ComPentairPentairhome.BluetoothPairingScreen'.", repo.ComPentairPentairhome.BluetoothPairingScreenInfo, new RecordItemIndex(11));
            Validate.AttributeContains(repo.ComPentairPentairhome.BluetoothPairingScreenInfo, "AccessibilityLabel", "Bluetooth Pairing");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.BackArrow_BTPair' at Center", repo.ComPentairPentairhome.BackArrow_BTPairInfo, new RecordItemIndex(12));
            repo.ComPentairPentairhome.BackArrow_BTPair.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(13));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComPentairPentairhome.BackArrow_WiFi' at Center", repo.ComPentairPentairhome.BackArrow_WiFiInfo, new RecordItemIndex(14));
            repo.ComPentairPentairhome.BackArrow_WiFi.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 3s.", new RecordItemIndex(15));
            Delay.Duration(3000, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
